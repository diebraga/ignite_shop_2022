import axios from "axios";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useState } from "react";
import Stripe from "stripe";
import { ProductType } from "..";
import { Button } from "../../components/Button/Button";
import { stripe } from "../../lib/stripe";
import {
  ImageContainer,
  ProductContainer,
  ProductDetails,
} from "../../styles/pages/product";
import { formatPrice } from "../../styles/utils/formatPrice";

type ProductProps = {
  product: ProductType;
  description: string;
  defaultPriceId: string;
  addToBag: () => void;
};

const Product: NextPage<ProductProps> = ({
  description,
  product,
  defaultPriceId,
  addToBag,
}) => {
  const [isCheckoutLoading, setIsCheckoutLoading] = useState(false);

  const handleBuyProduct = async () => {
    try {
      setIsCheckoutLoading(true);
      const response = await axios.post("/api/checkout", {
        priceId: defaultPriceId,
      });

      const { checkoutUrl } = response.data;

      window.location.href = checkoutUrl;
    } catch (error: any) {
      setIsCheckoutLoading(false);
      alert("Error making checkout");
    }
  };

  return (
    <>
      <Head>
        <title>{product.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ProductContainer>
        <ImageContainer>
          <Image
            src={product.imageUrl}
            alt={product.name}
            width={520}
            height={480}
          />
        </ImageContainer>

        <ProductDetails>
          <h1>{product.name}</h1>
          <span>{product.price}</span>

          <p>{description}</p>
          <Button
            isDisabled={isCheckoutLoading}
            // @ts-ignore
            onClick={() => addToBag(product)}
          >
            Add to bag
          </Button>
        </ProductDetails>
      </ProductContainer>
    </>
  );
};

export default Product;

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  const productID = params?.id as string;

  const product = await stripe.products.retrieve(productID, {
    expand: ["default_price"],
  });
  const price = product.default_price as Stripe.Price;

  return {
    props: {
      product: {
        id: product.id,
        name: product.name,
        imageUrl: product.images[0],
        price: formatPrice(price.unit_amount as number),
        rawPrice: price.unit_amount as number,
      },
      description: product.description,
      defaultPriceId: price.id,
    },
  };
};
